package com.wind.carmanager.activity;import android.annotation.SuppressLint;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentTransaction;import android.util.Log;import android.view.KeyEvent;import android.view.View;import com.alibaba.sdk.android.push.CommonCallback;import com.wind.carmanager.MyApplication;import com.wind.carmanager.R;import com.wind.carmanager.base.BaseActivity;import com.wind.carmanager.fragment.CarControlFragment;import com.wind.carmanager.fragment.ElectricFenceFragment;import com.wind.carmanager.fragment.MineFragment;import com.wind.carmanager.fragment.VehicleConditionFragment;import com.wind.carmanager.model.AllDeviceInfoBean;import com.wind.carmanager.model.GetBikeBean;import com.wind.carmanager.okhttp.OkHttpUtils;import com.wind.carmanager.okhttp.api.Api;import com.wind.carmanager.okhttp.callback.GenericsCallback;import com.wind.carmanager.utils.BaseInfoSPUtil;import com.wind.carmanager.utils.BitmapUtil;import com.wind.carmanager.utils.JsonGenericsSerializator;import com.wind.carmanager.utils.NetUtil;import com.wind.carmanager.widget.BottomTabItem;import com.wind.carmanager.model.UserInfoBean;import com.wind.carmanager.model.UserInfoBean.ResultBean.User;import com.wind.carmanager.model.GetBikeBean.ResultBean.DevicesBean;import java.util.List;import butterknife.BindView;import butterknife.OnClick;import okhttp3.Call;public class MainActivity extends BaseActivity {    private static final String TAG = "MainActivity";    @BindView(R.id.tab_vehicle_condition)    BottomTabItem mTabVehicleCondition;    @BindView(R.id.tab_electric_fence)    BottomTabItem mTabElectricFence;    @BindView(R.id.tab_car_control)    BottomTabItem mTabCarControl;    @BindView(R.id.tab_mine)    BottomTabItem mTabMine;    //车况    private VehicleConditionFragment mVehicleConditionFragment;    //电子围栏    private ElectricFenceFragment mElectricFenceFragment;    //车辆控制    private CarControlFragment mCarControlFragment;    //个人中心    private MineFragment mMineFragment;    private MyApplication application;    private List<GetBikeBean.ResultBean.DevicesBean> devices;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);//        requestGetEbike(BaseInfoSPUtil.getInstance().getLoginToken(this));        setTab(1);        BitmapUtil.init();        getUserInfoFromServ();    }    @Override    protected void onDestroy() {        super.onDestroy();        BitmapUtil.clear();    }    private void getUserInfoFromServ(){        OkHttpUtils.get()                .url(Api.USER_INFO)                .addHeader("Authorization","Bearer " + BaseInfoSPUtil.getInstance().getLoginToken(this))                .build()                .execute(new GenericsCallback<UserInfoBean>(new JsonGenericsSerializator()) {                    @Override                    public void onError(Call call, Exception e, int id, int code) {                        Log.i(TAG, "onError e " + e.toString());                        if (!NetUtil.isNetworkAvailable(MainActivity.this)){                            showToast(getResources().getString(R.string.isNetWork));                        }                    }                    @Override                    public void onResponse(UserInfoBean response, int id, int code) {                        int mCode = response.getCode();                        if(mCode == 1000){                            User user = response.getResultBean().getUser();                            int userId = user.getId();                            Log.i(TAG, "userId = " + userId);                            BaseInfoSPUtil.getInstance().setUserId(MainActivity.this, userId);                            bindPushAccount();                        }else if(mCode == 1001){                            showToast("Wrong user id");                        }                    }                });    }    private void bindPushAccount(){        ((MyApplication)getApplicationContext()).mPushService                   .bindAccount(getBindPushServiceId(), new CommonCallback() {            @Override            public void onSuccess(String s) {                Log.i(TAG, "bindAccount success  BaseInfoSPUtil.getInstance().getUserPhoneNum(this) = " +                        BaseInfoSPUtil.getInstance().getUserPhoneNum(getApplicationContext()));            }            @Override            public void onFailed(String s, String s1) {                Log.i(TAG, "bindAccount fail");            }        });    }    private String getBindPushServiceId(){        int userID = BaseInfoSPUtil.getInstance().getUserId(this);        String bindId = "ACCOUNT-" + String.format("%011d", userID);        return bindId;    }    @OnClick({R.id.tab_vehicle_condition, R.id.tab_electric_fence, R.id.tab_car_control, R.id.tab_mine})    public void onClick(View view) {        switch (view.getId()) {            case R.id.tab_vehicle_condition:                setTab(1);                break;            case R.id.tab_electric_fence:                setTab(2);                break;            case R.id.tab_car_control:                setTab(3);                break;            case R.id.tab_mine:                setTab(4);                break;        }    }    /**     * Tab选择     *     * @param index     */    public void setTab(int index) {        switch (index) {            case 1:                setOtherTabsNormal();                showHomeFragment();                break;            case 2:                setOtherTabsNormal();                showFindSeatFragment();                break;            case 3:                setOtherTabsNormal();                showWantBuyFragment();                break;            case 4:                setOtherTabsNormal();                showMineFragment();                break;            default:                break;        }    }    /**     * 首页     */    public void showHomeFragment() {        mTabVehicleCondition.setTabSelected(true);        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (mVehicleConditionFragment == null) {            mVehicleConditionFragment = new VehicleConditionFragment();            fragmentTransaction.add(R.id.fragmentContent, mVehicleConditionFragment);        }        commitShowFragment(fragmentTransaction, mVehicleConditionFragment);    }    /**     * 找座     */    public void showFindSeatFragment() {        mTabElectricFence.setTabSelected(true);        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (mElectricFenceFragment == null) {            mElectricFenceFragment = new ElectricFenceFragment();            fragmentTransaction.add(R.id.fragmentContent, mElectricFenceFragment);        }        commitShowFragment(fragmentTransaction, mElectricFenceFragment);    }    /**     * 求购     */    public void showWantBuyFragment() {        mTabCarControl.setTabSelected(true);        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (mCarControlFragment == null) {            mCarControlFragment = new CarControlFragment();            fragmentTransaction.add(R.id.fragmentContent, mCarControlFragment);        }        commitShowFragment(fragmentTransaction, mCarControlFragment);    }    /**     * 我的     */    public void showMineFragment() {        mTabMine.setTabSelected(true);        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();        hideAllFragment(fragmentTransaction);        if (mMineFragment == null) {            mMineFragment = new MineFragment();            fragmentTransaction.add(R.id.fragmentContent, mMineFragment);        }        commitShowFragment(fragmentTransaction, mMineFragment);    }    /**     * 提交事务     *     * @param fragmentTransaction     * @param fragment     */    public void commitShowFragment(FragmentTransaction fragmentTransaction, Fragment fragment) {        fragmentTransaction.show(fragment);        fragmentTransaction.commit();    }    /**     * 隐藏Fragment     *     * @param fragmentTransaction     */    public void hideAllFragment(FragmentTransaction fragmentTransaction) {        hideFragment(fragmentTransaction, mVehicleConditionFragment);        hideFragment(fragmentTransaction, mElectricFenceFragment);        hideFragment(fragmentTransaction, mCarControlFragment);        hideFragment(fragmentTransaction, mMineFragment);    }    /**     * 隐藏Fragment     */    private void hideFragment(FragmentTransaction fragmentTransaction, Fragment fragment) {        if (fragment != null) {            fragmentTransaction.hide(fragment);        }    }    /**     * tab置为false     */    private void setOtherTabsNormal() {        mTabVehicleCondition.setTabSelected(false);        mTabElectricFence.setTabSelected(false);        mTabCarControl.setTabSelected(false);        mTabMine.setTabSelected(false);    }    @SuppressLint("MissingSuperCall")    @Override    protected void onSaveInstanceState(Bundle outState) {        //super.onSaveInstanceState(outState);    }    /**     * 获取所有设备信息     **/    private void requestGetEbike(String token) {        OkHttpUtils.get()                .url(Api.EBIKE)                .addHeader("Authorization", "Bearer " + token)                .build()                .execute(new GenericsCallback<GetBikeBean>(new JsonGenericsSerializator()) {                    @Override                    public void onError(Call call, Exception e, int id, int code) {                        if (!NetUtil.isNetworkAvailable(MainActivity.this)) {                            showToast(getResources().getString(R.string.isNetWork));                        }                    }                    @Override                    public void onResponse(GetBikeBean response, int id, int code) {                        int mCode = response.getCode();                        if (mCode == 1000) {                            devices = response.getResult().getDevices();                            String deviceName = BaseInfoSPUtil.getInstance().getDeviceName(MainActivity.this);                            for(DevicesBean device : devices){                                if(deviceName.equals(device.getName())){                                    BaseInfoSPUtil.getInstance().setDeviceId(MainActivity.this, device.getId());                                    BaseInfoSPUtil.getInstance().setSensitivity(MainActivity.this, (String) device.getSensitivity());                                }                            }                        } else if (mCode == 1001) {                        } else if (mCode == 1002) {                        }                    }                });    }    private long temptime = 0;    @Override    public boolean onKeyDown(int keyCode, KeyEvent event)// 主要是对这个函数的复写    {        if ((keyCode == KeyEvent.KEYCODE_BACK) && (event.getAction() == KeyEvent.ACTION_DOWN)) {            if (System.currentTimeMillis() - temptime > 2000) // 2s内再次选择back键有效            {                showToast("再按一次退出Ag车管家");                temptime = System.currentTimeMillis();            } else {                finish();            }            return true;        }        return super.onKeyDown(keyCode, event);    }}