package com.wind.carmanager;import android.app.Application;import android.app.Notification;import android.content.Context;import android.content.SharedPreferences;import android.util.DisplayMetrics;import android.util.Log;import com.alibaba.sdk.android.push.CloudPushService;import com.alibaba.sdk.android.push.CommonCallback;import com.alibaba.sdk.android.push.noonesdk.PushServiceFactory;import com.baidu.mapapi.SDKInitializer;import com.baidu.trace.LBSTraceClient;import com.baidu.trace.Trace;import com.baidu.trace.api.entity.LocRequest;import com.baidu.trace.api.entity.OnEntityListener;import com.baidu.trace.api.track.LatestPointRequest;import com.baidu.trace.api.track.OnTrackListener;import com.baidu.trace.model.BaseRequest;import com.baidu.trace.model.OnCustomAttributeListener;import com.baidu.trace.model.ProcessOption;import com.wind.carmanager.model.ItemInfo;import com.wind.carmanager.okhttp.OkHttpUtils;import com.wind.carmanager.okhttp.log.LoggerInterceptor;import com.wind.carmanager.utils.CommonUtil;import com.wind.carmanager.utils.NetUtil;import com.wind.carmanager.widget.SupportMultipleScreensUtil;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.UUID;import java.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicInteger;import cn.jpush.android.api.JPushInterface;import okhttp3.OkHttpClient;public class MyApplication extends Application {	private AtomicInteger mSequenceGenerator = new AtomicInteger();	public static final UUID SPP_UUID = UUID.fromString("00001106-0000-1000-8000-00805F9B34FB");	public static final String TAG = "MyApplication";	private LocRequest locRequest = null;	private Notification notification = null;	public Context mContext = null;	public List<ItemInfo> itemInfos = new ArrayList<>();	public SharedPreferences trackConf = null;	/**	 * 轨迹客户端	 */	public LBSTraceClient mClient = null;	/**	 * 轨迹服务	 */	public Trace mTrace = null;	/**	 * 轨迹服务ID	 */	public long serviceId = 164308;	/**	 * Entity标识	 */	public String entityName = "myTrace";	public boolean isRegisterReceiver = false;	/**	 * 服务是否开启标识	 */	public boolean isTraceStarted = false;	/**	 * 采集是否开启标识	 */	public boolean isGatherStarted = false;	public static int screenWidth = 0;	public static int screenHeight = 0;	public String mUserName;	public String mPassword;	private static MyApplication mInstance;	public static MyApplication getInstance() {		return mInstance;	}	public CloudPushService mPushService;	@Override	public void onCreate() {		super.onCreate();		mInstance = this;		mContext = getApplicationContext();		entityName = CommonUtil.getImei(this);		SupportMultipleScreensUtil.init(this);		//okHttp初始化		OkHttpClient okHttpClient = new OkHttpClient.Builder()				.connectTimeout(20000L, TimeUnit.MILLISECONDS)				.readTimeout(20000L, TimeUnit.MILLISECONDS)				.addInterceptor(new LoggerInterceptor("AgCarManager"))				//其他配置				.build();		OkHttpUtils.initClient(okHttpClient);		// 若为创建独立进程，则不初始化成员变量		if ("com.baidu.track:remote".equals(CommonUtil.getCurProcessName(mContext))) {			return;		}		SDKInitializer.initialize(mContext);		mClient = new LBSTraceClient(mContext);		trackConf = getSharedPreferences("track_conf", MODE_PRIVATE);		locRequest = new LocRequest(serviceId);		mClient.setOnCustomAttributeListener(new OnCustomAttributeListener() {			@Override			public Map<String, String> onTrackAttributeCallback() {				Map<String, String> map = new HashMap<>();				map.put("key1", "value1");				map.put("key2", "value2");				return map;			}			@Override			public Map<String, String> onTrackAttributeCallback(long locTime) {				System.out.println("onTrackAttributeCallback, locTime : " + locTime);				Map<String, String> map = new HashMap<>();				map.put("key1", "value1");				map.put("key2", "value2");				return map;			}		});		clearTraceStatus();//        startServerSocket();		JPushInterface.setDebugMode(true);		JPushInterface.init(this);		initCloudChannel(this);	}	private void initCloudChannel(Context applicationContext){		PushServiceFactory.init(applicationContext);		mPushService = PushServiceFactory.getCloudPushService();		mPushService.register(applicationContext, new CommonCallback() {			@Override			public void onSuccess(String response) {				Log.i(TAG, "init cloudchannel success");			}			@Override			public void onFailed(String errorCode, String errorMessage) {				Log.e(TAG, "init cloudchannel failed -- errorcode:" + errorCode + " -- errorMessage:" + errorMessage);			}		});	}	public void initTrace(String entity){		mTrace = new Trace(serviceId, entity);		mTrace.setNotification(notification);	}	/**	 * 获取当前位置	 */	public void getCurrentLocation(OnEntityListener entityListener, OnTrackListener trackListener) {		// 网络连接正常，开启服务及采集，则查询纠偏后实时位置；否则进行实时定位		if (NetUtil.isNetworkAvailable(mContext)				&& trackConf.contains("is_trace_started")				&& trackConf.contains("is_gather_started")				&& trackConf.getBoolean("is_trace_started", false)				&& trackConf.getBoolean("is_gather_started", false)) {			LatestPointRequest request = new LatestPointRequest(getTag(), serviceId, mUserName);			ProcessOption processOption = new ProcessOption();			processOption.setNeedDenoise(true);			processOption.setRadiusThreshold(100);			request.setProcessOption(processOption);			mClient.queryLatestPoint(request, trackListener);		} else {			mClient.queryRealTimeLoc(locRequest, entityListener);		}	}	/**	 * 获取屏幕尺寸	 */	private void getScreenSize() {		DisplayMetrics dm = getResources().getDisplayMetrics();		screenHeight = dm.heightPixels;		screenWidth = dm.widthPixels;	}	/**	 * 清除Trace状态：初始化app时，判断上次是正常停止服务还是强制杀死进程，根据trackConf中是否有is_trace_started字段进行判断。	 * <p>	 * 停止服务成功后，会将该字段清除；若未清除，表明为非正常停止服务。	 */	private void clearTraceStatus() {		if (trackConf.contains("is_trace_started") || trackConf.contains("is_gather_started")) {			SharedPreferences.Editor editor = trackConf.edit();			editor.remove("is_trace_started");			editor.remove("is_gather_started");			editor.apply();		}	}	/**	 * 初始化请求公共参数	 *	 * @param request	 */	public void initRequest(BaseRequest request) {		request.setTag(getTag());		request.setServiceId(serviceId);	}	/**	 * 获取请求标识	 *	 * @return	 */	public int getTag() {		return mSequenceGenerator.incrementAndGet();	}	public void clear() {		itemInfos.clear();	}}